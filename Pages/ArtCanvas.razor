@page "/canvas"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Diagnostics
@implements IAsyncDisposable
@inject IJSRuntime JS

<div>@_drawTime</div>

<MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
    <InputFile id="@FileInputId" @ref="InputFileRef" style="display: none;" OnChange="ShowPreview" />
    <MudFab HtmlTag="label"
            Color="MudColor.Primary"
            StartIcon="@Icons.Material.Filled.Image"
            Label="Upload Image"
            Disabled="!AssemblyIsLoaded"
            for="@FileInputId" />
    @if (ImageIsUploaded)
    {
        <div class="d-flex flex-row gap-2 my-2">
            <MudButton Color="MudColor.Primary" Variant="Variant.Filled" OnClick="HandleSave">Save</MudButton>
            <MudButton Color="MudColor.Secondary" Variant="Variant.Filled" OnClick="HandleReset">Reset</MudButton>
        </div>
        @if (ShowStretchedImageAlert)
        {
            <MudAlert Severity="Severity.Warning" ShowCloseIcon="true" CloseIconClicked="RemoveStretchedImageUploadAlert">Image is large and may display artifacts from scaling</MudAlert>
        }
    }
</MudStack>
@if (!AssemblyIsLoaded)
{
    <div class="d-flex flex-row justify-center" style="min-height: 25rem;">
        <MudProgressCircular Color="MudColor.Primary" Indeterminate="true" />
    </div>
}

<div style="@(ImageIsUploaded ? "" : "display: none;")">
    <canvas id="@CleanCanvasId" @ref="CleanCanvasRef" style="display: none;"></canvas>
    <MudStack Row="true" Style="margin-right: -28rem; margin-left: -28rem;" Class="flex-grow-1 my-2">
        <div class="d-flex flex-column align-end" style="width: 65%;">
            <canvas id="@MainCanvasId" @ref="MainCanvasRef" class="flex-grow-0" style="border: 1px solid black;"></canvas>
        </div>
        <MudSpacer />
        <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Style="width:30%;">
            <MudStack Row="true" Spacing="2" Class="flex-wrap">
                <MudButton Color="MudColor.Primary" Variant="Variant.Filled" OnClick="() => { AddEffect(Effect.FloydSteinbergDither); }">Floyd-Steinberg Dither</MudButton>
                <MudButton Color="MudColor.Primary" Variant="Variant.Filled" OnClick="() => { AddEffect(Effect.OrderedDither); }">Ordered Dither</MudButton>
                <MudButton Color="MudColor.Primary" Variant="Variant.Filled" OnClick="() => { AddEffect(Effect.Quantization); }">Quantization</MudButton>
                <MudButton Color="MudColor.Primary" Variant="Variant.Filled" OnClick="() => { AddEffect(Effect.Invert); }">Invert</MudButton>
                <MudButton Color="MudColor.Primary" Variant="Variant.Filled" OnClick="() => { AddEffect(Effect.Pixelate); }">Pixelate</MudButton>
            </MudStack>
            <MudDropContainer @ref="EffectsUIListRef" ItemIsDisabled="@((item) => !item.Draggable)" T="EffectItem" Items="Effects" ItemsSelector="@((item,dropzone) => true)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-0 align-start" Style="width: 100%;">
                <ChildContent>
                    <MudPaper Class="flex-grow-1">
                        <MudList Class="d-flex flex-column">
                            <MudListSubheader>Effects</MudListSubheader>
                            <MudDivider DividerType="DividerType.Middle" Light="true"></MudDivider>
                            <MudDropZone T="EffectItem" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
                        </MudList>
                    </MudPaper>
                </ChildContent>
                <ItemRenderer>
                    <ArtCanvasEffectListItem EffectItem="@context" OnValueChangedCallback="OnEffectOptionValueChangedCallback" OnDragStateChangedCallback="OnEffectItemDragStateChanged" OnDeleteCallback="OnEffectDeleteCallback"></ArtCanvasEffectListItem>
                </ItemRenderer>
            </MudDropContainer>
        </MudStack>
    </MudStack>
</div>


@code {
    private const string MainCanvasId = "tutorial";
    private const string CleanCanvasId = "clean-canvas";
    private const string FileInputId = "mud-file-uploader";

    private long _drawTime = 0;

    private ElementReference MainCanvasRef { get; set; }
    private ElementReference CleanCanvasRef { get; set; }
    private InputFile? InputFileRef { get; set; }

    private Lazy<IJSObjectReference> JSModule = new();

    private bool AssemblyIsLoaded = false;
    private bool ImageIsUploaded = false;
    private bool ShowStretchedImageAlert = false;

    private byte[] _cleanImageBytes = null!;
    private CanvasDimensions _dimensions = null!;

    private MudDropContainer<EffectItem> EffectsUIListRef { get; set; } = null!;

    private void ItemUpdated(MudItemDropInfo<EffectItem> dropItem)
    {
        Effects.ForEach(e => e.Draggable = false);
        Effects.UpdateOrder(dropItem, item => item.Order);
        Effects.Sort((e1, e2) => e1.Order > e2.Order ? 1 : -1);
        RedrawCanvas();
    }

    private void OnEffectOptionValueChangedCallback(string msg)
    {
        Log("ValueChanged callback");
        Log(msg);
        RedrawCanvas();
    }

    private void OnEffectItemDragStateChanged()
    {
        EffectsUIListRef.Refresh();
    }

    private void OnEffectDeleteCallback(EffectItem item)
    {
        Effects.Remove(item);
        EffectsUIListRef.Refresh();
        RedrawCanvas();
    }

    private void RedrawCanvas()
    {
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.Start();
        // ResetImage(MainCanvasId, CleanCanvasId);
        Console.WriteLine($"Redrawing Canvas: {Effects.Count} effects");
        var canvasBytes = _cleanImageBytes.ToArray();
        Console.WriteLine("Finished Copying clean image bytes");
        ApplyEffects(canvasBytes);
        Console.WriteLine("Setting Canvas");
        SetBytes(MainCanvasId, canvasBytes);
        stopwatch.Stop();
        _drawTime = stopwatch.ElapsedMilliseconds;
        base.StateHasChanged();
    }

    private List<EffectItem> Effects = new();

    public class EffectItem
    {
        public ICanvasEffect Effect { get; init; } = null!;
        public int Order { get; set; }
        public bool Draggable { get; set; } = false;
    }

    private enum Effect
    {
        FloydSteinbergDither,
        Invert,
        Pixelate,
        OrderedDither,
        Quantization,
    }

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser())
        {
            await JSHost.ImportAsync("ArtCanvas",
                    $"../Pages/ArtCanvas.razor.js");
            JSModule = new(await JS.InvokeAsync<IJSObjectReference>("import", $"../Pages/ArtCanvas.razor.js"));

            Log("I'm logging from interop!");
            AssemblyIsLoaded = true;
        }
    }

    private record CanvasDimensions(int Width, int Height);

    private async Task ShowPreview(InputFileChangeEventArgs e)
    {
        Log("File Uploaded");
        var streamRef = new DotNetStreamReference(e.File.OpenReadStream(e.File.Size));
        await JSModule.Value.InvokeVoidAsync("setImage", streamRef, MainCanvasRef);
        _cleanImageBytes = GetBytes(MainCanvasId);

        _dimensions = await JSModule.Value.InvokeAsync<CanvasDimensions>("getDimensions", MainCanvasRef);
        if (_dimensions.Width > 1150)
        {
            ShowStretchedImageAlert = true;
        }
        ImageIsUploaded = true;
        Effects.Clear();
        EffectsUIListRef.Refresh();
    }

    private void RemoveStretchedImageUploadAlert()
    {
        ShowStretchedImageAlert = false;
    }

    private void HandleSave()
    {
        Log("Save File");
        SaveImage(MainCanvasId);
    }

    private void HandleReset()
    {
        Log("File Reset");
        Effects.Clear();
        SetBytes(MainCanvasId, _cleanImageBytes);
        EffectsUIListRef.Refresh();
    }

    private byte[] ApplyEffect(ICanvasEffect effect, byte[] bytes)
    {
        if (!effect.Enabled)
        {
            return bytes;
        }
        Log("Applying Effect");
        return effect.Apply(bytes, _dimensions.Width, _dimensions.Height);
    }

    private void ApplyEffects(byte[] bytes)
    {
        foreach (var effect in Effects)
        {
            ApplyEffect(effect.Effect, bytes);
        }
    }

    private void AddEffect(Effect effectType/* , bool apply = true */)
    {
        var effect = (new CanvasEffectFactory()).CreateFor(effectType, JSModule.Value);
        Effects.Add(new EffectItem { Effect = effect, Order = Effects.Count });
        EffectsUIListRef.Refresh();

        // if (apply)
        // {
        var canvasBytes = GetBytes(MainCanvasId);
        canvasBytes = ApplyEffect(effect, canvasBytes);
        SetBytes(MainCanvasId, canvasBytes);
        // }
    }

    private class GenericCanvasEffect(string name, List<CanvasEffectOption> options, IPostProcesser postProcess) : ICanvasEffect
    {
        public string Name => name;
        public bool Enabled { get; set; } = true;
        public List<CanvasEffectOption> Options => options;
        private IPostProcesser PostProcess => postProcess;

        public byte[] Apply(byte[] bytes, int width, int height)
        {
            PostProcess.Process(bytes, width, height, ArtCanvas.OptionsListToDictionary(Options));
            return bytes;
        }
    }

    public interface ICanvasEffect
    {
        public string Name { get; }
        public bool Enabled { get; set; }
        public List<CanvasEffectOption> Options { get; }
        byte[] Apply(byte[] bytes, int width, int height);
    }

    private class CanvasEffectFactory
    {
        public ICanvasEffect CreateFor(Effect effect, IJSObjectReference jsModule)
        {
            CanvasEffectBuilder builder = new CanvasEffectBuilder();

            switch (effect)
            {
                case Effect.FloydSteinbergDither:
                    return builder
                        .WithName("FS-Dither")
                        .WithSliderOption("Color Bits", "colorBits", 1, 1, 8, 1)
                        .WithCheckboxOption("Grayscale", "grayscale", false)
                        .WithPostProcess(new FloydSteinbergDitherer())
                        .Build();

                case Effect.OrderedDither:
                    return builder
                        .WithName("O-Dither")
                        .WithSliderOption("Strength", "strength", 2, 0, 4, 1)
                        .WithSliderOption("Color Bits", "colorBits", 1, 1, 8, 1)
                        .WithCheckboxOption("Grayscale", "grayscale", false)
                        .WithPostProcess(new OrderedDitherer())
                        .Build();

                case Effect.Invert:
                    return builder
                        .WithName("Invert")
                        .WithPostProcess(new ColorInverter())
                        .Build();

                case Effect.Pixelate:
                    return builder
                        .WithName("Pixelate")
                        .WithSliderOption("Strength", "strength", 2, 1, 5, 1)
                        .WithPostProcess(new Pixelater())
                        .Build();

                case Effect.Quantization:
                    return builder
                        .WithName("Quantization")
                        // .WithSliderOption("Palette Size", "paletteSize", 12, 2, 127, 1)
                        .WithNumericField("Palette Size", "paletteSize", 12, 2, 127, 1)
                        .WithPostProcess(new OctreeQuantizer())
                        .Build();

                default:
                    return builder
                        .WithName("FS-Dither")
                        .Build();
            }
        }
    }

    private class CanvasEffectBuilder()
    {
        private string Name { get; set; } = String.Empty;
        private List<CanvasEffectOption> Options { get; set; } = new List<CanvasEffectOption>();
        private IPostProcesser PostProcess { get; set; } = new NoOpPostProcessor();

        public CanvasEffectBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public CanvasEffectBuilder WithPostProcess(IPostProcesser postProcess)
        {
            PostProcess = postProcess;
            return this;
        }

        public CanvasEffectBuilder WithSliderOption(string name, string key, int initialValue, int minValue, int maxValue, int step)
        {
            Options.Add(new CanvasEffectOption(name, key, CanvasEffectOptionInputType.Slider, initialValue, minValue, maxValue, step));
            return this;
        }

        public CanvasEffectBuilder WithCheckboxOption(string name, string key, bool initialValue)
        {
            Options.Add(new CanvasEffectOption(name, key, CanvasEffectOptionInputType.Checkbox, initialValue));
            return this;
        }

        public CanvasEffectBuilder WithRadioOption(string name, string key, List<string> selectOptions, string defaultValue)
        {
            Options.Add(CanvasEffectOption.NewRadioOption(name, key, selectOptions, defaultValue));
            return this;
        }

        public CanvasEffectBuilder WithNumericField(string name, string key, int initialValue, int minValue, int maxValue, int step)
        {
            Options.Add(new CanvasEffectOption(name, key, CanvasEffectOptionInputType.NumericField, initialValue, minValue, maxValue, step));
            return this;
        }

        public ICanvasEffect Build()
        {
            var effect = new GenericCanvasEffect(Name, Options, PostProcess);
            Name = String.Empty;
            Options = new List<CanvasEffectOption>();
            PostProcess = new NoOpPostProcessor();

            return effect;
        }
    }

    public class CanvasEffectOption
    {
        public CanvasEffectOption(string name, string key, CanvasEffectOptionInputType inputType, int value,
                                     int minValue, int maxValue, int step)
        {
            Name = name;
            Key = key;
            InputType = inputType;
            Value = value;
            MinValue = minValue;
            MaxValue = maxValue;
            Step = step;
        }

        public CanvasEffectOption(string name, string key, CanvasEffectOptionInputType inputType, bool initialValue)
        {
            Name = name;
            Key = key;
            InputType = inputType;
            BinaryValue = initialValue;
        }

        private CanvasEffectOption()
        {

        }

        public static CanvasEffectOption NewRadioOption(string name, string key, List<string> values, string defaultValue)
        {
            var option = new CanvasEffectOption()
                {
                    InputType = CanvasEffectOptionInputType.Radio,
                    Name = name,
                    Key = key,
                    SelectOptions = values,
                    StringValue = defaultValue,
                };
            return option;
        }

        public string Name { get; private set; } = null!;
        public string Key { get; private set; } = null!;
        public CanvasEffectOptionInputType InputType { get; private set; } = CanvasEffectOptionInputType.Slider;
        public int Value { get; set; }
        public int MinValue { get; }
        public int MaxValue { get; }
        public int Step { get; }
        public bool BinaryValue { get; set; }
        public string? StringValue { get; set; }
        public List<string>? SelectOptions { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumConverter))]
    public enum CanvasEffectOptionInputType
    {
        Slider,
        Checkbox,
        Radio,
        NumericField
    }

    private static Dictionary<string, CanvasEffectOption> OptionsListToDictionary(List<CanvasEffectOption> options) => options.ToDictionary(o => o.Key, o => o);

    public async ValueTask DisposeAsync()
    {
        if (JSModule.IsValueCreated)
        {
            await JSModule.Value.DisposeAsync();
        }
    }
}